ROC_plot <- generate_ROC_curve(RF_models = All_data_models[[5]], dataset=flip_all_Data, labels="Test")
colnames(class_A) <- "classes"
class_A
plot(All_data_models[[5]])
plot(All_data_models[[1]])
boxplot(All_data_models[[1]])
table(class_A)
table(class_B)
##
library(DMwR)
library(RandomForestUtils)
library(randomForest)
### Load in curated genelist
Mo_genelist <- read.table("~/projects/Taxol-Mo-Project/Datasets/genelist/mo_genelist_edit.txt", stringsAsFactors = F)
### load in datasets
Dataset_A <- read.table("~/projects/Taxol-Mo-Project/Datasets/exp_tables/GSE20194_table.txt", sep="\t", quote="", header=T, row.names = 1)
Dataset_B <- read.table("~/projects/Taxol-Mo-Project/Datasets/exp_tables/GSE25055_table.txt", sep="\t", quote="", header=T, row.names = 1)
Dataset_A <- data.frame(t(Dataset_A))
Dataset_B <- data.frame(t(Dataset_B))
### load in drug responses
Class_A <- read.table("~/projects/Taxol-Mo-Project/Datasets/outcomes/GSE20194.txt", sep="\t", quote = "", header=F, row.names=1)
Class_B <- read.table("~/projects/Taxol-Mo-Project/Datasets/outcomes/GSE25055.txt", sep="\t", quote = "", header=F, row.names=1)
table(Class_A)
?Run_RF_Pipeline
library(forcats)
Class_A
Class_A <- as.vector(Class_A)
Class_A
## load in libraries we need to do the analysis
library(DMwR)
library(RandomForestUtils)
library(randomForest)
library(forcats)
### Load in curated genelist
Mo_genelist <- read.table("~/projects/Taxol-Mo-Project/Datasets/genelist/mo_genelist_edit.txt", stringsAsFactors = F)
### load in datasets
Dataset_A <- read.table("~/projects/Taxol-Mo-Project/Datasets/exp_tables/GSE20194_table.txt", sep="\t", quote="", header=T, row.names = 1)
Dataset_A <- data.frame(t(Dataset_A))
Dataset_B <- read.table("~/projects/Taxol-Mo-Project/Datasets/exp_tables/GSE25055_table.txt", sep="\t", quote="", header=T, row.names = 1)
Dataset_B <- data.frame(t(Dataset_B))
### load in drug responses
Class_A <- read.table("~/projects/Taxol-Mo-Project/Datasets/outcomes/GSE20194.txt", sep="\t", quote = "", header=F, row.names=1)
Class_A <- as.vector(Class_A)
Class_A
### we will set cases as those that are responding and set controls as those that are resistant
Class_A <- fct_recode(Class_A$V2, Case="Responding", Control="Resistant")
Class_A
Class_B <- read.table("~/projects/Taxol-Mo-Project/Datasets/outcomes/GSE25055.txt", sep="\t", quote = "", header=F, row.names=1)
Class_B <- fct_recode(Class_B$V2, Case="Responding", Control="Resistant")
## set up savepath for results
SAVE_PATH <- "~/projects/Taxol-Mo-Project/RF_Results/GSE20194/smote/"
## set up savepath for results
SAVE_PATH <- "~/projects/Taxol-Mo-Project/RF_Results/GSE20194/smote/"
##set seeds for data splitting
set.seed(1995)
seeds <- sample.int(10000000, 10)
## set number of cores we want to use...
RandomForestUtils::set_cores(70)
## set number of cores we want to use...
RandomForestUtils::set_cores(75)
### Set up curated dataset
Mo_dataset_A <- Dataset_A[,Mo_genelist$V1]
Mo_dataset_B <- Dataset_B[,Mo_genelist$V1]
Class_A
#we will evalute each model using ROC
#we will do smote sampling due to the fairly large class imbalnce
#we will try 4 different values of mtry
#use 1001 trees
#3 folds
#repeat datasplitting 5 times
#0.8 of the data will be used for training in each case
curated_dataset_A <- RandomForestUtils::Run_RF_Pipeline(feature_table = Mo_dataset_A,
classes=Class_A,
metric = "ROC",
sampling="smote",
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
curated_dataset_A[[1]]
Roc_curve <- generate_ROC_curve(RF_models = curated_dataset_A[[5]], datset=Mo_dataset_A, labels = Class_A, "test")
Roc_curve <- generate_ROC_curve(RF_models = curated_dataset_A[[5]], dataset=Mo_dataset_A, labels = Class_A, "test")
curated_dataset_A[[5]]
rownames(curated_dataset_A[[1]])
rownames(curated_dataset_A[[5]])
rownames(curated_dataset_A[[5]][[1]]$trainingData)
rownames(Class_A)
knitr::opts_chunk$set(echo = TRUE)
## load in libraries we need to do the analysis
library(DMwR)
library(RandomForestUtils)
library(randomForest)
library(forcats)
### Load in curated genelist
Mo_genelist <- read.table("~/projects/Taxol-Mo-Project/Datasets/genelist/mo_genelist_edit.txt", stringsAsFactors = F)
### load in datasets
Dataset_A <- read.table("~/projects/Taxol-Mo-Project/Datasets/exp_tables/GSE20194_table.txt", sep="\t", quote="", header=T, row.names = 1)
Dataset_A <- data.frame(t(Dataset_A))
Dataset_B <- read.table("~/projects/Taxol-Mo-Project/Datasets/exp_tables/GSE25055_table.txt", sep="\t", quote="", header=T, row.names = 1)
Dataset_B <- data.frame(t(Dataset_B))
### Set up curated dataset
Mo_dataset_A <- Dataset_A[,Mo_genelist$V1]
Mo_dataset_B <- Dataset_B[,Mo_genelist$V1]
### load in drug responses
Class_A <- read.table("~/projects/Taxol-Mo-Project/Datasets/outcomes/GSE20194.txt", sep="\t", quote = "", header=F, row.names=1)
Class_B <- read.table("~/projects/Taxol-Mo-Project/Datasets/outcomes/GSE25055.txt", sep="\t", quote = "", header=F, row.names=1)
### we will set cases as those that are responding and set controls as those that are resistant
Class_A$classes <- fct_recode(Class_A$V2, Case="Responding", Control="Resistant")
Class_B$classes <- fct_recode(Class_B$V2, Case="Responding", Control="Resistant")
## set up savepath for results
SAVE_PATH <- "~/projects/Taxol-Mo-Project/RF_Results/GSE20194/smote/"
##set seeds for data splitting
set.seed(1995)
seeds <- sample.int(10000000, 10)
## set number of cores we want to use...
RandomForestUtils::set_cores(75)
#we will evalute each model using ROC
#we will do smote sampling due to the fairly large class imbalnce
#we will try 4 different values of mtry
#use 1001 trees
#3 folds
#repeat datasplitting 5 times
#0.8 of the data will be used for training in each case
curated_dataset_A <- RandomForestUtils::Run_RF_Pipeline(feature_table = Mo_dataset_A,
classes=Class_A$classes,
metric = "ROC",
sampling="smote",
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
Roc_curve <- generate_ROC_curve(RF_models = curated_dataset_A[[5]], dataset=Mo_dataset_A, labels = Class_A, "test")
Roc_curve
#we will evalute each model using ROC
#we will do smote sampling due to the fairly large class imbalnce
#we will try 4 different values of mtry
#use 1001 trees
#3 folds
#repeat datasplitting 5 times
#0.8 of the data will be used for training in each case
curated_dataset_A <- RandomForestUtils::Run_RF_Pipeline(feature_table = Mo_dataset_A,
classes=Class_A$classes,
metric = "ROC",
sampling="smote",
repeats=100,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
seeds <- sample.int(10000000, 100)
## set up savepath for results
SAVE_PATH <- "~/projects/Taxol-Mo-Project/RF_Results/GSE20194/smote/"
##set seeds for data splitting
set.seed(1995)
seeds <- sample.int(10000000, 100)
## set number of cores we want to use...
RandomForestUtils::set_cores(75)
#we will evalute each model using ROC
#we will do smote sampling due to the fairly large class imbalnce
#we will try 4 different values of mtry
#use 1001 trees
#3 folds
#repeat datasplitting 5 times
#0.8 of the data will be used for training in each case
curated_dataset_A <- RandomForestUtils::Run_RF_Pipeline(feature_table = Mo_dataset_A,
classes=Class_A$classes,
metric = "ROC",
sampling="smote",
repeats=100,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
seeds <- sample.int(10000000, 1000)
#we will evalute each model using ROC
#we will do smote sampling due to the fairly large class imbalnce
#we will try 4 different values of mtry
#use 1001 trees
#3 folds
#repeat datasplitting 5 times
#0.8 of the data will be used for training in each case
curated_dataset_A <- RandomForestUtils::Run_RF_Pipeline(feature_table = Mo_dataset_A,
classes=Class_A$classes,
metric = "ROC",
sampling="smote",
repeats=100,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
curated_dataset_A[[1]]
Roc_curve <- generate_ROC_curve(RF_models = curated_dataset_A[[5]], dataset=Mo_dataset_A, labels = Class_A, "Performance of Curated Gene list Dataset A")
Roc_curve
## now run all datasets
SAVE_PATH <- "~/projects/Taxol-Mo-Project/RF_Results/GSE20194/smote/All_Genes/"
# same settings as before except we will only use 10 repeats due to time constrants
All_genes_dataset_A <- RandomForestUtils::Run_RF_Pipeline(feature_table = Mo_dataset_A,
classes=Class_A$classes,
metric = "ROC",
sampling="smote",
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
# same settings as before except we will only use 10 repeats due to time constrants
All_genes_dataset_A <- RandomForestUtils::Run_RF_Pipeline(feature_table = Mo_dataset_A,
classes=Class_A$classes,
metric = "ROC",
sampling="smote",
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
# same settings as before except we will only use 10 repeats due to time constrants
All_genes_dataset_A <- RandomForestUtils::Run_RF_Pipeline(feature_table = Dataset_A,
classes=Class_A$classes,
metric = "ROC",
sampling="smote",
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
all_data_ROC <- generate_ROC_curve(RF_models = All_genes_dataset_A[[5]], dataset=Dataset_A, labels = Class_A, "Performance of all genes dataset B")
all_data_ROC```
all_data_ROC
All_genes_dataset_A[[1]]
mean(All_genes_dataset_A[[1]])
all_data_ROC
mean(curated_dataset_A[[1]])
Roc_curve
curated_dataset_A[[1]]
mean(curated_dataset_A[[1]])
curated_dataset_A[[2]]
mean(curated_dataset_A[[2]])
All_genes_dataset_A[[2]]
mean(All_genes_dataset_A[[2]])
all_data_ROC
ncols(Dataset_A)
ncol(Dataset_A)
?sample
random_genes <- sample(1:ncol(Dataset_A), size=18)
random_genes
random_genes1 <- sample(1:ncol(Dataset_A), size=18)
random_genes1
Random_genes1_model <- random_genes1_data <- Dataset_A[,random_genes1]
SAVE_PATH <- "~/projects/Taxol-Mo-Project/RF_Results/GSE20194/smote/random_gene1/smote/"
random_Gene_model1 <- RandomForestUtils::Run_RF_Pipeline(feature_table = Random_genes1_model,
classes=Class_A$classes,
metric = "ROC",
sampling="smote",
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
random_gene1_ROC <generate_ROC_curve(RF_models= random_Gene_model1[[5]], dataset=Random_genes1_model, labels = Class_A, "Random Gene selection1 Performance")
random_gene1_ROC <- generate_ROC_curve(RF_models= random_Gene_model1[[5]], dataset=Random_genes1_model, labels = Class_A, "Random Gene selection1 Performance")
random_gene1_ROC
random_gene2 < sample(1:ncol(Dataset_A), size = 18)
random_gene2 <- sample(1:ncol(Dataset_A), size = 18)
random_gene2_dataset <- Dataset_A[,random_gene2]
random_gene2_model <- RandomForestUtils::Run_RF_Pipeline(feature_table = random_gene2_dataset,
classes=Class_A$classes,
metric = "ROC",
sampling="smote",
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
random_gene2_ROC <- generate_ROC_curve(random_gene2_model[[5]], random_gene2_dataset, labels = Class_A, "Random Gene selection2 Performance")
random_gene2_ROC
random_gene3 <- sample(1:ncol(Dataset_A), 18)
random_gene3_dataset <- Dataset_A[,random_gene3]
random_gene3_model <- RandomForestUtils::Run_RF_Pipeline(feature_table = random_gene3_dataset,
classes=Class_A$classes,
metric = "ROC",
sampling="smote",
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
random_gene3_model[[2]]
random_gene3_ROC <- generate_ROC_curve(RF_models = random_gene3_model[[5]], random_gene3_dataset, labels = Class_A, "Random Gene Selection3 Performance")
random_gene3_ROC
random_gene3_model[[1]]
random_gene3_model[[3]]
random_gene3_model[[4]]
random_gene3_model[[5]]
top_feats_mo <- Calc_mean_accuray_decrease(curated_dataset_A[[6]])
top_feats_mo <- Calc_mean_accuray_decrease(curated_dataset_A[[4]])
top_feats_mo <- Calc_mean_accuray_decrease(curated_dataset_A[[3]])
### feature analysis
curated_dataset_A[[3]]
### feature analysis
curated_dataset_A[[5]]
### feature analysis
curated_dataset_A[[6]]
### feature analysis
curated_dataset_A[[3]]
### feature analysis
curated_dataset_A[[2]]
### feature analysis
curated_dataset_A[[5]]
top_feats_mo <- Calc_mean_accuray_decrease(curated_dataset_A[[5]])
### feature analysis
curated_dataset_A[[4]]
top_feats_mo <- Calc_mean_accuray_decrease(curated_dataset_A[[4]])
#' Calc_mean_accuracy_decrease
#'
#' @param impt_feat_list A list of dataframes containing the list of important features generated from running Run_RF_Pipeline.
#' @return Returns a dataframe containing the mean, sd, max, and min decrease in accuracy for each feature over all of the random forest models that worked best during cross
#' validation.
#' @export
Calc_mean_accuray_decrease <- function(impt_feat_list){
pass=TRUE
#make sure colnames for each impt_feat_table matches up
for(j in 1:length(impt_feat_list)){
if(!all.equal(rownames(impt_feat_list[[1]]), rownames(impt_feat_list[[j]]))){
pass=FALSE
}
}
if(pass==FALSE){
message("rownames don't match")
return(NULL)
}
ret_data_list <- list()
for(i in 1:length(impt_feat_list)){
prefix <- paste0("t",i)
message(prefix)
acc <- impt_feat_list[[i]][,3]
ret_data_list[[prefix]] <- acc
}
ret_data_frame <- do.call(cbind, ret_data_list)
test <- as.data.frame(cbind(ret_data_frame, t(apply(ret_data_frame, 1, Stats))))
ret_final_frame <- test[order(test$Mean, decreasing=TRUE), ]
return(ret_final_frame)
}
top_feats_mo <- Calc_mean_accuray_decrease(curated_dataset_A[[4]])
View(top_feats_mo)
top_feats_mo$Mean
library(ggplot2)
top_feats_mo$feat <- rownames(top_feats_mo)
Mo_top_feats <- ggplot(top_feats_mo, aes(x=feat, y=Mean)) + geom_col()
Mo_top_feats
Mo_top_feats <- ggplot(top_feats_mo, aes(x=feat, y=Mean)) + geom_point()
Mo_top_feats
Mo_top_feats <- ggplot(top_feats_mo, aes(x=feat, y=Mean)) + geom_point() + geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=0.2)
Mo_top_feats
Mo_top_feats <- ggplot(top_feats_mo, aes(x=feat, y=Mean)) + geom_point() + geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=0.2) + coord_flip()
Mo_top_feats
Mo_top_feats <- ggplot(top_feats_mo, aes(x=feat, y=Mean)) + geom_point() + geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=0.2) + coord_flip() +ylab("Mean Decrease in Accuracy")
Mo_top_feats
levels(feat)
top_feats_mo$feat <- as.factor(rownames(top_feats_mo), levels=rownames(top_feats_mo))
top_feats_mo$feat <- factor(rownames(top_feats_mo), levels=rownames(top_feats_mo))
Mo_top_feats <- ggplot(top_feats_mo, aes(x=feat, y=Mean)) + geom_point() + geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=0.2) + coord_flip() +ylab("Mean Decrease in Accuracy")
Mo_top_feats
Mo_top_feats <- ggplot(top_feats_mo, aes(x=feat, y=Mean)) + geom_point() + geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=0.2) + coord_flip() +ylab("Mean Decrease in Accuracy") +xlab("Gene Name")
Mo_top_feats
Mo_top_feats <- ggplot(top_feats_mo, aes(x=feat, y=Mean)) + geom_point() + geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=0.2) + coord_flip() +ylab("Mean Decrease in Accuracy") +xlab("Gene Name") + ggtitle("Feature Importance Curated Dataset")
Mo_top_feats
top_feats_all <- Calc_mean_accuray_decrease(All_genes_dataset_A[[4]])
top_feats_all$feat <- factor(rownames(top_feats_all), levels=rownames(top_feats_all))
top_20_feats_all <- top_feats_all[1:20,]
all_top_feats <- ggplot(top_20_feats_all, aes(x=feat, y=Mean)) + geom_point() + geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=0.2) + coord_flip() +ylab("Mean Decrease in Accuracy") +xlab("Gene Name") + ggtitle("Feature Importance Curated Dataset")
all_top_feats
SAVE_PATH <- "~/projects/Taxol-Mo-Project/RF_Results/GSE25055/smote/curated_res/"
curated_dataset_B <- RandomForestUtils::Run_RF_Pipeline(feature_table = Mo_dataset_B,
classes=Class_B$classes,
metric = "ROC",
sampling="smote",
repeats=100,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
curated_dataset_B_ROC <- generate_ROC_curve(RF_models = curated_dataset_B, dataset=Mo_dataset_B, labels = Class_B, "Curated Genelist Dataset B Performance")
curated_dataset_B_ROC <- generate_ROC_curve(RF_models = curated_dataset_B[[5]], dataset=Mo_dataset_B, labels = Class_B, "Curated Genelist Dataset B Performance")
curated_dataset_B_ROC
All_dataset_B <- RandomForestUtils::Run_RF_Pipeline(feature_table = Dataset_B,
classes=Class_B$classes,
metric = "ROC",
sampling="smote",
repeats=100,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
All_dataset_B <- RandomForestUtils::Run_RF_Pipeline(feature_table = Dataset_B,
classes=Class_B$classes,
metric = "ROC",
sampling="smote",
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
SAVE_PATH <- "~/projects/Taxol-Mo-Project/RF_Results/GSE25055/smote/all_Data/"
## set number of cores we want to use...
RandomForestUtils::set_cores(75)
All_dataset_B <- RandomForestUtils::Run_RF_Pipeline(feature_table = Dataset_B,
classes=Class_B$classes,
metric = "ROC",
sampling="smote",
repeats=10,
path=SAVE_PATH,
nmtry=4,
ntree=1001,
nfolds=3,
ncrossrepeats = 5,
pro=0.8,
list_of_seeds = seeds)
All_dataset_B_ROC <- generate_ROC_curve(RF_models = All_dataset_B[[5]], dataset=Dataset_B, labels = Class_B, title = "All genes dataset B performance")
All_dataset_B_ROC
curated_dataset_B_feats <- Calc_mean_accuray_decrease(curated_dataset_B_feats[[4]])
curated_dataset_B_feats <- Calc_mean_accuray_decrease(curated_dataset_B[[5]])
curated_dataset_B_feats <- Calc_mean_accuray_decrease(curated_dataset_B[[4]])
curated_dataset_B_feats$feats <- factor(rownames(curated_dataset_B), levels = rownames(curated_dataset_B))
curated_dataset_B_feats$feats <- factor(rownames(curated_dataset_B_feats), levels = rownames(curated_dataset_B_feats))
top_feats_curated_B <- ggplot(curated_dataset_B_feats, aes(x=feat, y=Mean)) + geom_point() + geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=0.2) + coord_flip() +ylab("Mean Decrease in Accuracy") +xlab("Gene Name") + ggtitle("Feature Importance Curated Dataset")
top_feats_curated_B
top_feats_curated_B <- ggplot(curated_dataset_B_feats, aes(x=feats, y=Mean)) + geom_point() + geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=0.2) + coord_flip() +ylab("Mean Decrease in Accuracy") +xlab("Gene Name") + ggtitle("Feature Importance Curated Dataset")
top_feats_curated_B
all_top_feats <- Calc_mean_accuray_decrease(All_dataset_B[[4]])
all_top_feat_20 <M- all_top_feats[1:20,]
all_top_feat_20 <- all_top_feats[1:20,]
top_feats_all_B <- ggplot(all_top_feat_20, aes(x=feats, y=Mean)) + geom_point() + geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=0.2) + coord_flip() +ylab("Mean Decrease in Accuracy") +xlab("Gene Name") + ggtitle("Feature Importance Curated Dataset")
top_feats_all_B
all_top_feat_20
all_top_feats$feats <- factor(rownames(all_top_feats), levels = rownames(all_top_feats))
all_top_feat_20 <- all_top_feats[1:20,]
top_feats_all_B <- ggplot(all_top_feat_20, aes(x=feats, y=Mean)) + geom_point() + geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=0.2) + coord_flip() +ylab("Mean Decrease in Accuracy") +xlab("Gene Name") + ggtitle("Feature Importance Curated Dataset")
top_feats_all_B
top_feats_all_B <- ggplot(all_top_feat_20, aes(x=feats, y=Mean)) + geom_point() + geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=0.2) + coord_flip() +ylab("Mean Decrease in Accuracy") +xlab("Gene Name") + ggtitle("Feature Importance All Dataset B")
top_feats_all_B
library(RandomForestUtils)
#load in expression tables
GSE20194_exp <- read.table("~/projects/Taxol-Mo-Project/Datasets/exp_tables/GSE20194_table.txt", sep="\t", quote="", header=T, row.names = 1)
GSE25055_exp <- read.table("~/projects/Taxol-Mo-Project/Datasets/exp_tables/GSE25055_table.txt", sep="\t", quote="", header=T, row.names = 1)
GSE25065_exp <- read.table("~/projects/Taxol-Mo-Project/Datasets/exp_tables/GSE25065_table.txt", sep="\t", quote="", header=T, row.names = 1)
GSE50948_exp <- read.table("~/projects/Taxol-Mo-Project/Datasets/exp_tables/GSE50948_table.txt", sep="\t", quote="", header=T, row.names = 1)
## load in outcomes list
GSE20194_classes <- read.table("~/projects/Taxol-Mo-Project/Datasets/outcomes/GSE20194_cleaned.txt", sep="\t", quote = "", header=F, row.names=1)
GSE25055_classes <- read.table("~/projects/Taxol-Mo-Project/Datasets/outcomes/GSE25055.txt", sep="\t", quote = "", header=F, row.names=1)
GSE25065_classes <- read.table("~/projects/Taxol-Mo-Project/Datasets/outcomes/GSE25065.txt", sep="\t", quote = "", header=F, row.names=1)
GSE50948_classes <- read.table("~/projects/Taxol-Mo-Project/Datasets/outcomes/GSE50948_outcomes.txt", sep="\t", quote = "", header=F, row.names=1)
GSE20194_classes$classes <- fct_recode(GSE20194_classes$V2, Case="Responding", Control="Resistant")
library(forcats)
GSE20194_classes$classes <- fct_recode(GSE20194_classes$V2, Case="Responding", Control="Resistant")
table(GSE20194_classes$classes)
table(GSE20194_classes$V2)
GSE25055_classes$classes <- fct_recode(GSE25055_classes$V2, Case="Responding", Control="Resistant")
table(GSE25055_classes$classes)
GSE25065_classes$classes <- fct_recode(GSE25065_classes$V2, Case="Responding", Control="Resistant")
table(GSE25065_classes$classes)
GSE50948_classes$classes <- fct_recode(GSE50948_classes$V2, Case="Responding", Control="Resistant")
table(GSE50948_classes$classes)
identical(rownames(GSE20194_classes), rownames(GSE20194_exp))
# need to subset the table
GSE20194_exp <- GSE20194_exp[rownames(GSE20194_classes),]
identical(rownames(GSE20194_classes), rownames(GSE20194_exp))
identical(rownames(GSE20194_classes), rownames(GSE20194_exp))
rownames(GSE20194_classes)
